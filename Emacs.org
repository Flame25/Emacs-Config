#+title: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el :mkdirp yes

#+begin_src emacs-lisp

;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
;;       in Emacs and init.el will be generated automatically!

;; You will most likely need to adjust this font size for your system!
(defvar fst/default-font-size 110)
(defvar fst/default-variable-font-size 110)

#+end_src

* Tips for Use

In this document I've added links in many places that lead you to documentation for the various packages we use.  If you're looking at this file in Emacs, you can put your cursor on a link and press =C-c C-o= or run =M-x org-open-at-point= to open the link in your web browser.

* Package System Setup

Emacs has a built in package manager but it doesn't make it easy to automatically install packages on a new system the first time you pull down your configuration.  [[https://github.com/jwiegley/use-package][use-package]] is a really helpful package used in this configuration to make it a lot easier to automate the installation and configuration of everything else we use.

#+begin_src emacs-lisp

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))

    ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src

* Basic UI Configuration

This section configures basic UI settings that remove unneeded elements to make Emacs look a lot more minimal and modern.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room

  (menu-bar-mode -1)            ; Disable the menu bar
  (global-visual-line-mode 1)

  (column-number-mode)
  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
		  term-mode-hook
		  shell-mode-hook
		  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Font Configuration

I am using the [[https://github.com/tonsky/FiraCode][Fira Code]] and [[https://fonts.google.com/specimen/Cantarell][Cantarell]] fonts for this configuration which will more than likely need to be installed on your machine.  Both can usually be found in the various Linux distro package managers or downloaded from the links above.

#+begin_src emacs-lisp

  (set-face-attribute 'default nil :font "CaskaydiaCove Nerd Font Mono" :height fst/default-font-size)


  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "CaskaydiaCove Nerd Font Mono" :height fst/default-font-size)

  (set-fontset-font t 'unicode "Noto Color Emoji" nil 'prepend)

#+end_src

** Todo, Error, etc Marker

Using [[https://github.com/tarsius/hl-todo][hl-todo]] to mark all the todo comment inside of a source code we can easier to list what need to be done in the future when opening the source code again. It also marked other stuff such as error, fixme and other you can mention by adding the list on the elisp.

#+begin_src emacs-lisp

  (use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-highlight-punctuation ":"
	hl-todo-keyword-faces
	`(("TODO"       warning bold)
	  ("FIXME"      error bold)
	  ("HACK"       font-lock-constant-face bold)
	  ("REVIEW"     font-lock-keyword-face bold)
	  ("NOTE"       success bold)
	  ("DEPRECATED" font-lock-doc-face bold))))
  
#+end_src

** Mini Buffer

This section is optional just to make emacs minibuffer fits with the NANO mode-line by using [[https://github.com/muffinmad/emacs-mini-frame][emacs-mini-frame]]

#+begin_src emacs-lisp

 ;; (use-package mini-frame
 ;;   :ensure t
 ;;   )


 ;; (require 'mini-frame)

 ;; (with-eval-after-load 'mini-frame

 ;;   ;; Miniframe at the bottom for a nicer display
 ;;   (setq mini-frame-show-parameters
 ;;	  `((left . 0.5)
 ;;	    (top . 1.0)
 ;;	    (width . 1.0)
 ;;	    (height . 10)
 ;;	    (left-fringe . 12)
 ;;	    (right-fringe .12)
 ;;	    (child-frame-border-width . 0)
 ;;	    (internal-border-width . 0)
 ;;	    ))

 ;;   (with-eval-after-load 'ivy
 ;;     (setq ivy-height 9)
 ;;     ;; See https://github.com/abo-abo/swiper/issues/2383
 ;;     (setcdr (assoc t ivy-format-functions-alist) #'ivy-format-function-line)
 ;;     (setq mini-frame-ignore-commands
 ;;	    '("edebug-eval-expression" debugger-eval-expression))

 ;;     ;; (setq mini-frame-resize 'grow-only) ;; -> buggy as of 01/05/2021
 ;;     (setq mini-frame-resize 'not-set)
 ;;     ;; (setq mini-frame-resize nil)
 ;;     (add-hook 'minibuffer-setup-hook
 ;;		(lambda ()
 ;;		  (overlay-put (make-overlay (point-min) (+ (point-min) 1))
 ;;			       'before-string
 ;;			       (propertize "\n" 'face `(:extend t
 ;;								:height .5)))))))

 ;;   (mini-frame-mode 1)

#+end_src

** Ivy-Postframe

#+begin_src emacs-lisp

  (use-package ivy-posframe
    :ensure t
    )

  (require 'ivy-posframe)
  ;; display at `ivy-posframe-style'
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-bottom-left)))
  ;; (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-top-center)))
  (ivy-posframe-mode 1)

#+end_src

** Custome Theme (Everforest)

[[https://github.com/Theory-of-Everything/everforest-emacs][Everforest]] is not yet on MELPA so manual installation is required.

#+begin_src emacs-lisp

  (add-to-list 'custom-theme-load-path "~/.config/emacs/everforest-theme/")
  (load-theme 'everforest-hard-dark t)

#+end_src
* Keybinding Configuration

This configuration uses [[https://evil.readthedocs.io/en/latest/index.html][evil-mode]] for a Vi-like modal editing experience.  [[https://github.com/noctuid/general.el][general.el]] is used for easy keybinding configuration that integrates well with which-key.  [[https://github.com/emacs-evil/evil-collection][evil-collection]] is used to automatically configure various Emacs modes with Vi-like keybindings for evil-mode. Therefore, to enable undo functionality we also add undo tree to enable ==C-r== keybinds. 

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  (use-package general
    :config
    (general-create-definer fst/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (fst/leader-keys
      "t"  '(:ignore t :which-key "toggles")
      "tt" '(counsel-load-theme :which-key "choose theme")))

  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

  (use-package undo-tree
  :ensure t
  :after evil
  :config
  (evil-set-undo-system 'undo-tree)
  (global-undo-tree-mode 1))

#+end_src

** Color Theme

[[https://github.com/hlissner/emacs-doom-themes][doom-themes]] is a great set of themes with a lot of variety and support for many different Emacs modes.  Taking a look at the [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots][screenshots]] might help you decide which one you like best.  You can also run =M-x counsel-load-theme= to choose between them easily.

#+begin_src emacs-lisp

;;(use-package doom-themes)

#+end_src

[[https://github.com/greduan/emacs-theme-gruvbox][gruvbox]] is another common theme that have been used by many people.

#+begin_src emacs-lisp

  ;;(use-package gruvbox-theme)
  
#+end_src

** Better Modeline

[[https://github.com/seagle0128/doom-modeline][doom-modeline]] is a very attractive and rich (yet still minimal) mode line configuration for Emacs.  The default configuration is quite good but you can check out the [[https://github.com/seagle0128/doom-modeline#customize][configuration options]] for more things you can enable or disable.

*NOTE:* The first time you load your configuration on a new machine, you'll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.

#+begin_src emacs-lisp

  (use-package all-the-icons)

  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :config (setq doom-modeline-bar-width 4))
  (setq evil-normal-state-tag   (propertize "[Normal]" 'face '((:background "green" :foreground "black")))
      evil-emacs-state-tag    (propertize "[Emacs]" 'face '((:background "orange" :foreground "black")))
      evil-insert-state-tag   (propertize "[Insert]" 'face '((:background "red") :foreground "white"))
      evil-motion-state-tag   (propertize "[Motion]" 'face '((:background "blue") :foreground "white"))
      evil-visual-state-tag   (propertize "[Visual]" 'face '((:background "grey80" :foreground "black")))
      evil-operator-state-tag (propertize "[Operator]" 'face '((:background "purple"))))
  (setq doom-modeline-modal-icon nil)

  ;; (use-package mood-line
  ;; :config
  ;; ;; Enable mood-line
  ;; (mood-line-mode)
  ;; ;; Use pretty Fira Code-compatible glyphs
  ;; (setq mood-line-glyph-alist mood-line-glyphs-unicode)
  ;; (setq mood-line-format mood-line-format-default-extended))

  ;;(use-package nano-modeline
  ;;  :ensure t
  ;;  :config
  ;;  (setopt nano-modeline-position 'nano-modeline-footer)

  ;;  (add-hook 'prog-mode-hook            #'nano-modeline-prog-mode)
  ;;  (add-hook 'text-mode-hook            #'nano-modeline-text-mode)
  ;;  (add-hook 'org-mode-hook             #'nano-modeline-org-mode)
  ;;  (add-hook 'pdf-view-mode-hook        #'nano-modeline-pdf-mode)
  ;;  (add-hook 'mu4e-headers-mode-hook    #'nano-modeline-mu4e-headers-mode)
  ;;  (add-hook 'mu4e-view-mode-hook       #'nano-modeline-mu4e-message-mode)
  ;;  (add-hook 'elfeed-show-mode-hook     #'nano-modeline-elfeed-entry-mode)
  ;;  (add-hook 'elfeed-search-mode-hook   #'nano-modeline-elfeed-search-mode)
  ;;  (add-hook 'term-mode-hook            #'nano-modeline-term-mode)
  ;;  (add-hook 'xwidget-webkit-mode-hook  #'nano-modeline-xwidget-mode)
  ;;  (add-hook 'messages-buffer-mode-hook #'nano-modeline-message-mode)
  ;;  (add-hook 'org-capture-mode-hook     #'nano-modeline-org-capture-mode)
  ;;  (add-hook 'org-agenda-mode-hook      #'nano-modeline-org-agenda-mode))



#+end_src

** Which Key

[[https://github.com/justbur/emacs-which-key][which-key]] is a useful UI panel that appears when you start pressing any key binding in Emacs to offer you all possible completions for the prefix.  For example, if you press =C-c= (hold control and press the letter =c=), a panel will appear at the bottom of the frame displaying all of the bindings under that prefix and which command they run.  This is very useful for learning the possible key bindings in the mode of your current buffer.

#+begin_src emacs-lisp

(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 1))

#+end_src

** Ivy and Counsel

[[https://oremacs.com/swiper/][Ivy]] is an excellent completion framework for Emacs.  It provides a minimal yet powerful selection menu that appears when you open files, switch buffers, and for many other tasks in Emacs.  Counsel is a customized set of commands to replace `find-file` with `counsel-find-file`, etc which provide useful commands for each of the default completion commands.

#+begin_src emacs-lisp

  (use-package diminish)

  (use-package swiper
    :after ivy
    :ensure t)

  (use-package counsel
    :ensure t
    :bind (("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file)
	   ("C-x b" . counsel-switch-buffer)
	   ("C-x C-r" . counsel-recentf)))

  (use-package ivy
    :ensure t
    :demand t
    :diminish
    :bind (("C-s" . swiper)
	   :map ivy-minibuffer-map
	   ("TAB" . ivy-alt-done)
	   ("C-l" . ivy-alt-done)
	   ("C-j" . ivy-next-line)
	   ("C-k" . ivy-previous-line)
	   :map ivy-switch-buffer-map
	   ("C-k" . ivy-previous-line)
	   ("C-l" . ivy-done)
	   ("C-d" . ivy-switch-buffer-kill)
	   :map ivy-reverse-i-search-map
	   ("C-k" . ivy-previous-line)
	   ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode t))

  (use-package ivy-rich
    :ensure t
    :init
    (ivy-rich-mode 1)
    :config
    (setq ivy-rich-path-style 'abbrev))


#+end_src

** Helpful Help Commands

[[https://github.com/Wilfred/helpful][Helpful]] adds a lot of very helpful (get it?) information to Emacs' =describe-= command buffers.  For example, if you use =describe-function=, you will not only get the documentation about the function, you will also see the source code of the function and where it gets used in other places in the Emacs configuration.  It is very useful for figuring out how things work in Emacs.

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Org Mode

[[https://orgmode.org/][Org Mode]] is one of the hallmark features of Emacs.  It is a rich document editor, project planner, task and time tracker, blogging engine, and literate coding utility all wrapped up in one package.

** Better Font Faces

The =efs/org-font-setup= function configures various text faces to tweak the sizes of headings and use variable width fonts in most cases so that it looks more like we're editing a document in =org-mode=.  We switch back to fixed width (monospace) fonts for code blocks and tables so that they display correctly.

#+begin_src emacs-lisp

  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

#+end_src

** Configure Babel Languages

To execute or export code in =org-mode= code blocks, you'll need to set up =org-babel-load-languages= for each language you'd like to use.  [[https://orgmode.org/worg/org-contrib/babel/languages.html][This page]] documents all of the languages that you can use with =org-babel=.

#+begin_src emacs-lisp

  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)
      (python . t)))

    (push '("conf-unix" . conf-unix) org-src-lang-modes)

#+end_src

#+RESULTS:
: ((conf-unix . conf-unix) (C . c) (C++ . c++) (asymptote . asy) (bash . sh) (beamer . latex) (calc . fundamental) (cpp . c++) (ditaa . artist) (desktop . conf-desktop) (dot . fundamental) (elisp . emacs-lisp) (ocaml . tuareg) (screen . shell-script) (shell . sh) (sqlite . sql) (toml . conf-toml))

** Structure Templates
#+begin_src emacs-lisp

  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))

#+end_src

#+RESULTS:
: ((el . src emacs-lisp) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

** Auto-tangle Configuration Files

This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.config/emacs/Emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-fold-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | (lambda nil (display-line-numbers-mode 0)) |

** Table of Contents

#+begin_src emacs-lisp
  (use-package toc-org
    :ensure t)

  (if (require 'toc-org nil t)
    (progn
      (add-hook 'org-mode-hook 'toc-org-mode))
  (warn "toc-org not found"))

#+end_src

* Development
** VTerm

#+begin_src emacs-lisp
(use-package vterm
    :ensure t)
#+end_src

** TRAMP

#+begin_src emacs-lisp

	  (use-package tramp
	  :config
	  ;; Use the remote machine's PATH
	  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
	  ;; Reduce verbosity for better performance
	  (setq tramp-verbose 1))

#+end_src

** LSP

We use the excellent [[https://emacs-lsp.github.io/lsp-mode/][lsp-mode]] to enable IDE-like functionality for many different programming languages via "language servers" that speak the [[https://microsoft.github.io/language-server-protocol/][Language Server Protocol]].  Before trying to set up =lsp-mode= for a particular language, check out the [[https://emacs-lsp.github.io/lsp-mode/page/languages/][documentation for your language]] so that you can learn which language servers are available and how to install them.

The =lsp-keymap-prefix= setting enables you to define a prefix for where =lsp-mode='s default keybindings will be added.  I *highly recommend* using the prefix to find out what you can do with =lsp-mode= in a buffer.

The =which-key= integration adds helpful descriptions of the various keys so you should be able to learn a lot just by pressing =C-c l= in a =lsp-mode= buffer and trying different things that you find there.

#+begin_src emacs-lisp

  (defun fst/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . fst/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
    :config
    (lsp-enable-which-key-integration t)
    (lsp-register-client
     (make-lsp-client
      :new-connection (lsp-tramp-connection "clangd-12")
      :major-modes '(c++-mode)
      :remote? t
      :server-id 'clangd-id))
   )

#+end_src

*** lsp-ui

[[https://emacs-lsp.github.io/lsp-ui/][lsp-ui]] is a set of UI enhancements built on top of =lsp-mode= which make Emacs feel even more like an IDE.  Check out the screenshots on the =lsp-ui= homepage (linked at the beginning of this paragraph) to see examples of what it can do.

#+begin_src emacs-lisp

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode)
    :custom
    (lsp-ui-doc-position 'bottom))

#+end_src

*** lsp-treemacs

[[https://github.com/emacs-lsp/lsp-treemacs][lsp-treemacs]] provides nice tree views for different aspects of your code like symbols in a file, references of a symbol, or diagnostic messages (errors and warnings) that are found in your code.

Try these commands with =M-x=:

- =lsp-treemacs-symbols= - Show a tree view of the symbols in the current file
- =lsp-treemacs-references= - Show a tree view for the references of the symbol under the cursor
- =lsp-treemacs-error-list= - Show a tree view for the diagnostic messages in the project

This package is built on the [[https://github.com/Alexander-Miller/treemacs][treemacs]] package which might be of some interest to you if you like to have a file browser at the left side of your screen in your editor.

#+begin_src emacs-lisp

  (use-package lsp-treemacs
    :after lsp)

#+end_src

*** lsp-ivy

[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp

  (use-package lsp-ivy)

#+end_src

** Company Mode

[[http://company-mode.github.io/][Company Mode]] provides a nicer in-buffer completion interface than =completion-at-point= which is more reminiscent of what you would expect from an IDE.  We add a simple configuration to make the keybindings a little more useful (=TAB= now completes the selection and initiates completion at the current location if needed).

We also use [[https://github.com/sebastiencs/company-box][company-box]] to further enhance the look of the completions with icons and better overall presentation.

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Language
*** Dart

*Not Working Right Now* 
This is a basic configuration for the TypeScript language so that =.dart= files activate =flutter-mode= when opened. We're using flutter LSP from [[https://github.com/emacs-lsp/lsp-dart][lsp-dart]]

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024))

  (use-package yasnippet
  :ensure t
  :config
  (yas-global-mode 1))  ;; Enable yasnippet globally

#+end_src

*** Clangd

Install [[https://clangd.llvm.org/installation][clangd]] combined with [[https://github.com/joaotavora/eglot][eglot]] so that it will be activate when you run =.cpp= and =.c= files. We're also using [[https://github.com/company-mode/company-mode][company-mode]] also running when eglot enabled for auto completion. Also to make it work clangd need a ==compile_commands.json== in the root of the project. If for example the root of the project is not there you need to create a linker from the location of the ==compile_commands.json== to the root of the project.

#+begin_src shell
  ln -s {location of the compile_commands.json} {root project}
#+end_src

#+begin_src emacs-lisp
    (progn
      (customize-set-variable 'eglot-extend-to-xref t)
      (customize-set-variable 'eglot-ignored-server-capabilities
	  (quote (:documentFormattingProvider :documentRangeFormattingProvider)))

      (with-eval-after-load 'eglot
	  (setq completion-category-defaults nil)
	  (add-to-list 'eglot-server-programs
	      '(c-mode c++-mode
		   . ("clangd"
			 "--malloc-trim"
			 "--log=error"
			 "--background-index"
			 "--clang-tidy"
			 "--cross-file-rename"
			 "--completion-style=detailed"
			 "--pch-storage=memory"
			 "--header-insertion=never"
			 "--header-insertion-decorators=0"))))

  (defun fst/hook-cpp-mode ()
    (eglot-ensure)
    (company-mode t)) 

  (add-hook 'c-mode-hook #'fst/hook-cpp-mode)
  (add-hook 'c++-mode-hook #'fst/hook-cpp-mode))
#+end_src

* Utilities
** Wakatime

Installing [[https://github.com/wakatime/wakatime-mode][wakatime]] to see how many hours you have been coding stuffs and see what editor being used. Not really important but can be used to see your coding statistics.

#+begin_src emacs-lisp

  ;; WakaTime Configuration
  (use-package wakatime-mode
    :ensure t  ; Automatically install if not present
    :config
    (setq wakatime-api-key (with-temp-buffer
			     (insert-file-contents (expand-file-name "~/.wakatime-api-key"))
			     (buffer-string)))
    (global-wakatime-mode 1))  ; Enable WakaTime mode

#+end_src
